#!/usr/bin/env node
import fs from "fs"
import { execSync } from "child_process"

console.log("üîç D√©marrage du diagnostic des erreurs serveur...")

// V√©rifier les fichiers de configuration
const configFiles = ["next.config.js", "tsconfig.json", "tailwind.config.ts"]
console.log("\nüìÅ V√©rification des fichiers de configuration...")

configFiles.forEach((file) => {
  try {
    if (fs.existsSync(file)) {
      console.log(`‚úÖ ${file} existe`)
    } else {
      console.log(`‚ùå ${file} est manquant`)
    }
  } catch (err) {
    console.error(`‚ùå Erreur lors de la v√©rification de ${file}:`, err)
  }
})

// V√©rifier les d√©pendances
console.log("\nüì¶ V√©rification des d√©pendances...")
try {
  const packageJson = JSON.parse(fs.readFileSync("package.json", "utf8"))
  const requiredDeps = ["next", "react", "react-dom", "next-themes", "@radix-ui/react-dropdown-menu", "lucide-react"]

  const missingDeps = requiredDeps.filter((dep) => !packageJson.dependencies[dep])

  if (missingDeps.length === 0) {
    console.log("‚úÖ Toutes les d√©pendances requises sont pr√©sentes")
  } else {
    console.log("‚ùå D√©pendances manquantes:", missingDeps.join(", "))
  }
} catch (err) {
  console.error("‚ùå Erreur lors de la v√©rification des d√©pendances:", err)
}

// V√©rifier les composants critiques
console.log("\nüß© V√©rification des composants critiques...")
const criticalComponents = [
  "components/theme-provider.tsx",
  "components/theme-switcher.tsx",
  "lib/web3/web3-provider.tsx",
  "app/layout.tsx",
]

criticalComponents.forEach((component) => {
  try {
    if (fs.existsSync(component)) {
      console.log(`‚úÖ ${component} existe`)

      // V√©rifier les exports
      const content = fs.readFileSync(component, "utf8")
      if (content.includes("export default")) {
        console.log(`  ‚úÖ ${component} a un export par d√©faut`)
      } else {
        console.log(`  ‚ö†Ô∏è ${component} n'a pas d'export par d√©faut`)
      }

      // V√©rifier les imports probl√©matiques
      if (content.includes("useEffect") && !content.includes("mounted")) {
        console.log(`  ‚ö†Ô∏è ${component} utilise useEffect sans v√©rification de montage`)
      }
    } else {
      console.log(`‚ùå ${component} est manquant`)
    }
  } catch (err) {
    console.error(`‚ùå Erreur lors de la v√©rification de ${component}:`, err)
  }
})

// V√©rifier les erreurs TypeScript
console.log("\nüîß V√©rification des erreurs TypeScript...")
try {
  execSync("npx tsc --noEmit", { stdio: "pipe" })
  console.log("‚úÖ Aucune erreur TypeScript d√©tect√©e")
} catch (err) {
  console.log("‚ùå Erreurs TypeScript d√©tect√©es:")
  console.log(err.stdout?.toString() || err.message)
}

// V√©rifier les erreurs ESLint
console.log("\nüßπ V√©rification des erreurs ESLint...")
try {
  execSync("npx eslint . --ext .ts,.tsx --max-warnings=0", { stdio: "pipe" })
  console.log("‚úÖ Aucune erreur ESLint d√©tect√©e")
} catch (err) {
  console.log("‚ùå Erreurs ESLint d√©tect√©es:")
  console.log(err.stdout?.toString() || err.message)
}

console.log("\nüèÅ Diagnostic termin√©!")
