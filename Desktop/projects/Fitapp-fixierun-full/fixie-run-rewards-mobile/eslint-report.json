[{"filePath":"/Users/devtehen/fixie-run-rewards-mobile/src/components/AchievementCard.tsx","messages":[{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#fff', shadowColor: '#000' }","line":52,"column":20,"nodeType":"ObjectExpression","endLine":62,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'marginBottom' should be before 'padding'.","line":56,"column":5,"nodeType":"CallExpression","endLine":56,"endColumn":17,"fix":{"range":[1508,1672],"text":"elevation: 1,\n    marginBottom: 10,\n    padding: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { borderLeftColor: '#10B981' }","line":63,"column":18,"nodeType":"ObjectExpression","endLine":66,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'borderLeftColor' should be before 'borderLeftWidth'.","line":65,"column":5,"nodeType":"CallExpression","endLine":65,"endColumn":20,"fix":{"range":[1702,1752],"text":"borderLeftColor: '#10B981',\n    borderLeftWidth: 3"}},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected class names to be in ascending order. 'achievementHeader' should be before 'completedCard'.","line":67,"column":3,"nodeType":"CallExpression","endLine":67,"endColumn":20,"fix":{"range":[1681,2727],"text":"achievementDescription: {\n    fontSize: 14,\n    color: '#666',\n    marginTop: 4,\n  },\n  achievementHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  achievementProgress: {\n    fontSize: 14,\n    color: '#3B82F6',\n    fontWeight: '500',\n  },\n  achievementTitle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  completedBadge: {\n    position: 'absolute',\n    top: 8,\n    right: 8,\n    backgroundColor: '#10B981',\n    borderRadius: 4,\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n  },\n  completedBadgeText: {\n    color: '#fff',\n    fontSize: 10,\n    fontWeight: 'bold',\n  },\n  completedCard: {\n    borderLeftWidth: 3,\n    borderLeftColor: '#10B981',\n  },\n  completedFill: {\n    backgroundColor: '#10B981',\n  },\n  completedText: {\n    color: '#10B981',\n  },\n  progressBar: {\n    height: 8,\n    backgroundColor: '#e0e0e0',\n    borderRadius: 4,\n    overflow: 'hidden',\n    marginBottom: 8,\n  },\n  progressFill: {\n    height: '100%',\n    backgroundColor: '#3B82F6',\n  }"}},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'alignItems' should be before 'justifyContent'.","line":70,"column":5,"nodeType":"CallExpression","endLine":70,"endColumn":15,"fix":{"range":[1786,1869],"text":"alignItems: 'center',\n    flexDirection: 'row',\n    justifyContent: 'space-between'"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#3B82F6' }","line":77,"column":24,"nodeType":"ObjectExpression","endLine":81,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'color' should be before 'fontSize'.","line":79,"column":5,"nodeType":"CallExpression","endLine":79,"endColumn":10,"fix":{"range":[1995,2029],"text":"color: '#3B82F6',\n    fontSize: 14"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#10B981' }","line":82,"column":18,"nodeType":"ObjectExpression","endLine":84,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#e0e0e0' }","line":85,"column":16,"nodeType":"ObjectExpression","endLine":91,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'backgroundColor' should be before 'height'.","line":87,"column":5,"nodeType":"CallExpression","endLine":87,"endColumn":20,"fix":{"range":[2126,2233],"text":"backgroundColor: '#e0e0e0',\n    borderRadius: 4,\n    height: 8,\n    marginBottom: 8,\n    overflow: 'hidden'"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#3B82F6' }","line":92,"column":17,"nodeType":"ObjectExpression","endLine":95,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'backgroundColor' should be before 'height'.","line":94,"column":5,"nodeType":"CallExpression","endLine":94,"endColumn":20,"fix":{"range":[2262,2308],"text":"backgroundColor: '#3B82F6',\n    height: '100%'"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#10B981' }","line":96,"column":18,"nodeType":"ObjectExpression","endLine":98,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#666' }","line":99,"column":27,"nodeType":"ObjectExpression","endLine":103,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'color' should be before 'fontSize'.","line":101,"column":5,"nodeType":"CallExpression","endLine":101,"endColumn":10,"fix":{"range":[2403,2434],"text":"color: '#666',\n    fontSize: 14"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#10B981' }","line":104,"column":19,"nodeType":"ObjectExpression","endLine":112,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'right' should be before 'top'.","line":107,"column":5,"nodeType":"CallExpression","endLine":107,"endColumn":10,"fix":{"range":[2483,2632],"text":"backgroundColor: '#10B981',\n    borderRadius: 4,\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    position: 'absolute',\n    right: 8,\n    top: 8"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#fff' }","line":113,"column":23,"nodeType":"ObjectExpression","endLine":117,"endColumn":4}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":9,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { Achievement } from '../services/activityService';\n\ninterface AchievementCardProps {\n  achievement: Achievement;\n}\n\nconst AchievementCard: React.FC<AchievementCardProps> = ({ achievement }) => {\n  // Format progress as a percentage\n  const progressPercent = Math.round(achievement.progress);\n  \n  return (\n    <View style={[\n      styles.achievementCard,\n      achievement.completed ? styles.completedCard : null\n    ]}>\n      <View style={styles.achievementHeader}>\n        <Text style={styles.achievementTitle}>{achievement.title}</Text>\n        <Text style={[\n          styles.achievementProgress,\n          achievement.completed ? styles.completedText : null\n        ]}>\n          {progressPercent}%\n        </Text>\n      </View>\n      \n      <View style={styles.progressBar}>\n        <View \n          style={[\n            styles.progressFill, \n            { width: `${achievement.progress}%` },\n            achievement.completed ? styles.completedFill : null\n          ]} \n        />\n      </View>\n      \n      <Text style={styles.achievementDescription}>\n        {achievement.description}\n      </Text>\n      \n      {achievement.completed && (\n        <View style={styles.completedBadge}>\n          <Text style={styles.completedBadgeText}>COMPLETED</Text>\n        </View>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  achievementCard: {\n    backgroundColor: '#fff',\n    borderRadius: 8,\n    padding: 12,\n    marginBottom: 10,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.1,\n    shadowRadius: 2,\n    elevation: 1,\n  },\n  completedCard: {\n    borderLeftWidth: 3,\n    borderLeftColor: '#10B981',\n  },\n  achievementHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 8,\n  },\n  achievementTitle: {\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  achievementProgress: {\n    fontSize: 14,\n    color: '#3B82F6',\n    fontWeight: '500',\n  },\n  completedText: {\n    color: '#10B981',\n  },\n  progressBar: {\n    height: 8,\n    backgroundColor: '#e0e0e0',\n    borderRadius: 4,\n    overflow: 'hidden',\n    marginBottom: 8,\n  },\n  progressFill: {\n    height: '100%',\n    backgroundColor: '#3B82F6',\n  },\n  completedFill: {\n    backgroundColor: '#10B981',\n  },\n  achievementDescription: {\n    fontSize: 14,\n    color: '#666',\n    marginTop: 4,\n  },\n  completedBadge: {\n    position: 'absolute',\n    top: 8,\n    right: 8,\n    backgroundColor: '#10B981',\n    borderRadius: 4,\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n  },\n  completedBadgeText: {\n    color: '#fff',\n    fontSize: 10,\n    fontWeight: 'bold',\n  },\n});\n\nexport default AchievementCard;\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devtehen/fixie-run-rewards-mobile/src/components/ActivityControls.tsx","messages":[{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#3B82F6' }","line":34,"column":16,"nodeType":"ObjectExpression","endLine":39,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'alignItems' should be before 'paddingVertical'.","line":38,"column":5,"nodeType":"CallExpression","endLine":38,"endColumn":15,"fix":{"range":[863,961],"text":"alignItems: 'center',\n    backgroundColor: '#3B82F6',\n    borderRadius: 8,\n    paddingVertical: 12"}},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected class names to be in ascending order. 'finishButton' should be before 'startButton'.","line":40,"column":3,"nodeType":"CallExpression","endLine":40,"endColumn":15,"fix":{"range":[844,1175],"text":"buttonText: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  finishButton: {\n    backgroundColor: '#EF4444',\n    borderRadius: 8,\n    paddingVertical: 12,\n    alignItems: 'center',\n  },\n  startButton: {\n    backgroundColor: '#3B82F6',\n    borderRadius: 8,\n    paddingVertical: 12,\n    alignItems: 'center',\n  }"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#EF4444' }","line":40,"column":17,"nodeType":"ObjectExpression","endLine":45,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'alignItems' should be before 'paddingVertical'.","line":44,"column":5,"nodeType":"CallExpression","endLine":44,"endColumn":15,"fix":{"range":[990,1088],"text":"alignItems: 'center',\n    backgroundColor: '#EF4444',\n    borderRadius: 8,\n    paddingVertical: 12"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#fff' }","line":46,"column":15,"nodeType":"ObjectExpression","endLine":50,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'fontSize' should be before 'fontWeight'.","line":49,"column":5,"nodeType":"CallExpression","endLine":49,"endColumn":13,"fix":{"range":[1134,1170],"text":"fontSize: 16,\n    fontWeight: 'bold'"}}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet } from 'react-native';\n\ninterface ActivityControlsProps {\n  isTracking: boolean;\n  onStart: () => void;\n  onFinish: () => void;\n}\n\nconst ActivityControls: React.FC<ActivityControlsProps> = ({ \n  isTracking, \n  onStart, \n  onFinish \n}) => {\n  return (\n    <View style={styles.activityControls}>\n      {!isTracking ? (\n        <TouchableOpacity style={styles.startButton} onPress={onStart}>\n          <Text style={styles.buttonText}>Start Activity</Text>\n        </TouchableOpacity>\n      ) : (\n        <TouchableOpacity style={styles.finishButton} onPress={onFinish}>\n          <Text style={styles.buttonText}>Finish</Text>\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  activityControls: {\n    marginBottom: 16,\n  },\n  startButton: {\n    backgroundColor: '#3B82F6',\n    borderRadius: 8,\n    paddingVertical: 12,\n    alignItems: 'center',\n  },\n  finishButton: {\n    backgroundColor: '#EF4444',\n    borderRadius: 8,\n    paddingVertical: 12,\n    alignItems: 'center',\n  },\n  buttonText: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n});\n\nexport default ActivityControls;\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devtehen/fixie-run-rewards-mobile/src/components/ActivityMode.tsx","messages":[{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#e0e0e0' }","line":52,"column":15,"nodeType":"ObjectExpression","endLine":58,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'paddingHorizontal' should be before 'paddingVertical'.","line":54,"column":5,"nodeType":"CallExpression","endLine":54,"endColumn":22,"fix":{"range":[1482,1606],"text":"backgroundColor: '#e0e0e0',\n    borderRadius: 20,\n    marginHorizontal: 8,\n    paddingHorizontal: 24,\n    paddingVertical: 8"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#333' }","line":59,"column":19,"nodeType":"ObjectExpression","endLine":62,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'color' should be before 'fontWeight'.","line":61,"column":5,"nodeType":"CallExpression","endLine":61,"endColumn":10,"fix":{"range":[1637,1673],"text":"color: '#333',\n    fontWeight: '500'"}},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected class names to be in ascending order. 'activeMode' should be before 'modeButtonText'.","line":63,"column":3,"nodeType":"CallExpression","endLine":63,"endColumn":13,"fix":{"range":[1354,1818],"text":"activeMode: {\n    backgroundColor: '#3B82F6',\n  },\n  activeModeText: {\n    color: '#fff',\n  },\n  activityModeContainer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginBottom: 16,\n  },\n  disabledButton: {\n    opacity: 0.6,\n  },\n  modeButton: {\n    paddingVertical: 8,\n    paddingHorizontal: 24,\n    borderRadius: 20,\n    backgroundColor: '#e0e0e0',\n    marginHorizontal: 8,\n  },\n  modeButtonText: {\n    fontWeight: '500',\n    color: '#333',\n  }"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#3B82F6' }","line":63,"column":15,"nodeType":"ObjectExpression","endLine":65,"endColumn":4},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#fff' }","line":66,"column":19,"nodeType":"ObjectExpression","endLine":68,"endColumn":4}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet } from 'react-native';\nimport { ActivityType } from '../services/activityService';\n\ninterface ActivityModeProps {\n  mode: ActivityType;\n  setMode: (mode: ActivityType) => void;\n  disabled: boolean;\n}\n\nconst ActivityMode: React.FC<ActivityModeProps> = ({ mode, setMode, disabled }) => {\n  return (\n    <View style={styles.activityModeContainer}>\n      <TouchableOpacity \n        style={[\n          styles.modeButton, \n          mode === 'run' ? styles.activeMode : null,\n          disabled ? styles.disabledButton : null\n        ]} \n        onPress={() => !disabled && setMode('run')}\n        disabled={disabled}\n      >\n        <Text style={[\n          styles.modeButtonText,\n          mode === 'run' ? styles.activeModeText : null\n        ]}>Run</Text>\n      </TouchableOpacity>\n      <TouchableOpacity \n        style={[\n          styles.modeButton, \n          mode === 'bike' ? styles.activeMode : null,\n          disabled ? styles.disabledButton : null\n        ]} \n        onPress={() => !disabled && setMode('bike')}\n        disabled={disabled}\n      >\n        <Text style={[\n          styles.modeButtonText,\n          mode === 'bike' ? styles.activeModeText : null\n        ]}>Bike</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  activityModeContainer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginBottom: 16,\n  },\n  modeButton: {\n    paddingVertical: 8,\n    paddingHorizontal: 24,\n    borderRadius: 20,\n    backgroundColor: '#e0e0e0',\n    marginHorizontal: 8,\n  },\n  modeButtonText: {\n    fontWeight: '500',\n    color: '#333',\n  },\n  activeMode: {\n    backgroundColor: '#3B82F6',\n  },\n  activeModeText: {\n    color: '#fff',\n  },\n  disabledButton: {\n    opacity: 0.6,\n  },\n});\n\nexport default ActivityMode;\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devtehen/fixie-run-rewards-mobile/src/components/MetricCard.tsx","messages":[{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'alignItems' should be before 'flex'.","line":23,"column":5,"nodeType":"CallExpression","endLine":23,"endColumn":15,"fix":{"range":[533,566],"text":"alignItems: 'center',\n    flex: 1"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#666' }","line":27,"column":16,"nodeType":"ObjectExpression","endLine":31,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'color' should be before 'fontSize'.","line":29,"column":5,"nodeType":"CallExpression","endLine":29,"endColumn":10,"fix":{"range":[636,667],"text":"color: '#666',\n    fontSize: 12"}},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected class names to be in ascending order. 'metricUnit' should be before 'metricValue'.","line":36,"column":3,"nodeType":"CallExpression","endLine":36,"endColumn":13,"fix":{"range":[697,815],"text":"metricUnit: {\n    fontSize: 12,\n    color: '#666',\n  },\n  metricValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  }"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#666' }","line":36,"column":15,"nodeType":"ObjectExpression","endLine":39,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'color' should be before 'fontSize'.","line":38,"column":5,"nodeType":"CallExpression","endLine":38,"endColumn":10,"fix":{"range":[779,810],"text":"color: '#666',\n    fontSize: 12"}}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\ninterface MetricCardProps {\n  label: string;\n  value: string | number;\n  unit: string;\n}\n\nconst MetricCard: React.FC<MetricCardProps> = ({ label, value, unit }) => {\n  return (\n    <View style={styles.metricCard}>\n      <Text style={styles.metricLabel}>{label}</Text>\n      <Text style={styles.metricValue}>{value}</Text>\n      <Text style={styles.metricUnit}>{unit}</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  metricCard: {\n    flex: 1,\n    alignItems: 'center',\n    padding: 8,\n    position: 'relative',\n  },\n  metricLabel: {\n    fontSize: 12,\n    color: '#666',\n    marginBottom: 4,\n  },\n  metricValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  metricUnit: {\n    fontSize: 12,\n    color: '#666',\n  },\n});\n\nexport default MetricCard;\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devtehen/fixie-run-rewards-mobile/src/components/RewardIndicator.tsx","messages":[{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#666' }","line":43,"column":15,"nodeType":"ObjectExpression","endLine":48,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'color' should be before 'textAlign'.","line":47,"column":5,"nodeType":"CallExpression","endLine":47,"endColumn":10,"fix":{"range":[1134,1211],"text":"color: '#666',\n    fontSize: 14,\n    marginBottom: 4,\n    textAlign: 'center'"}},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected class names to be in ascending order. 'progressBarContainer' should be before 'rewardText'.","line":49,"column":3,"nodeType":"CallExpression","endLine":49,"endColumn":23,"fix":{"range":[1072,1452],"text":"progressBar: {\n    height: 8,\n    backgroundColor: '#e0e0e0',\n    borderRadius: 4,\n    overflow: 'hidden',\n  },\n  progressBarContainer: {\n    padding: 2,\n  },\n  progressFill: {\n    height: '100%',\n    backgroundColor: '#3B82F6',\n  },\n  rewardIndicator: {\n    marginTop: 8,\n  },\n  rewardText: {\n    fontSize: 14,\n    marginBottom: 4,\n    textAlign: 'center',\n    color: '#666',\n  }"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#e0e0e0' }","line":52,"column":16,"nodeType":"ObjectExpression","endLine":57,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'backgroundColor' should be before 'height'.","line":54,"column":5,"nodeType":"CallExpression","endLine":54,"endColumn":20,"fix":{"range":[1286,1348],"text":"backgroundColor: '#e0e0e0',\n    borderRadius: 4,\n    height: 8"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#3B82F6' }","line":58,"column":17,"nodeType":"ObjectExpression","endLine":61,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'backgroundColor' should be before 'height'.","line":60,"column":5,"nodeType":"CallExpression","endLine":60,"endColumn":20,"fix":{"range":[1401,1447],"text":"backgroundColor: '#3B82F6',\n    height: '100%'"}}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\ninterface RewardIndicatorProps {\n  currentDistance: number;\n  nextRewardDistance: number;\n}\n\nconst RewardIndicator: React.FC<RewardIndicatorProps> = ({ \n  currentDistance, \n  nextRewardDistance \n}) => {\n  // Calculate progress percentage (capped at 100%)\n  const progress = Math.min((currentDistance / nextRewardDistance) * 100, 100);\n  \n  // Format values for display\n  const currentFormatted = currentDistance.toFixed(2);\n  const nextFormatted = nextRewardDistance.toFixed(1);\n  \n  return (\n    <View style={styles.rewardIndicator}>\n      <Text style={styles.rewardText}>\n        Next reward at {nextFormatted} km ({currentFormatted}/{nextFormatted})\n      </Text>\n      <View style={styles.progressBarContainer}>\n        <View style={styles.progressBar}>\n          <View \n            style={[\n              styles.progressFill, \n              { width: `${progress}%` }\n            ]} \n          />\n        </View>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  rewardIndicator: {\n    marginTop: 8,\n  },\n  rewardText: {\n    fontSize: 14,\n    marginBottom: 4,\n    textAlign: 'center',\n    color: '#666',\n  },\n  progressBarContainer: {\n    padding: 2,\n  },\n  progressBar: {\n    height: 8,\n    backgroundColor: '#e0e0e0',\n    borderRadius: 4,\n    overflow: 'hidden',\n  },\n  progressFill: {\n    height: '100%',\n    backgroundColor: '#3B82F6',\n  },\n});\n\nexport default RewardIndicator;\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devtehen/fixie-run-rewards-mobile/src/components/TokenCounter.tsx","messages":[{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'alignItems' should be before 'flex'.","line":28,"column":5,"nodeType":"CallExpression","endLine":28,"endColumn":15,"fix":{"range":[697,730],"text":"alignItems: 'center',\n    flex: 1"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#666' }","line":32,"column":16,"nodeType":"ObjectExpression","endLine":36,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'color' should be before 'fontSize'.","line":34,"column":5,"nodeType":"CallExpression","endLine":34,"endColumn":10,"fix":{"range":[800,831],"text":"color: '#666',\n    fontSize: 12"}},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected class names to be in ascending order. 'metricUnit' should be before 'metricValue'.","line":41,"column":3,"nodeType":"CallExpression","endLine":41,"endColumn":13,"fix":{"range":[861,979],"text":"metricUnit: {\n    fontSize: 12,\n    color: '#666',\n  },\n  metricValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  }"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#666' }","line":41,"column":15,"nodeType":"ObjectExpression","endLine":44,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'color' should be before 'fontSize'.","line":43,"column":5,"nodeType":"CallExpression","endLine":43,"endColumn":10,"fix":{"range":[943,974],"text":"color: '#666',\n    fontSize: 12"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#10B981' }","line":45,"column":16,"nodeType":"ObjectExpression","endLine":53,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'right' should be before 'top'.","line":48,"column":5,"nodeType":"CallExpression","endLine":48,"endColumn":10,"fix":{"range":[1002,1153],"text":"backgroundColor: '#10B981',\n    borderRadius: 12,\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    position: 'absolute',\n    right: 0,\n    top: -8"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#fff' }","line":54,"column":20,"nodeType":"ObjectExpression","endLine":58,"endColumn":4}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\ninterface TokenCounterProps {\n  tokens: number;\n  recentReward: number;\n}\n\nconst TokenCounter: React.FC<TokenCounterProps> = ({ tokens, recentReward }) => {\n  return (\n    <View style={styles.metricCard}>\n      <Text style={styles.metricLabel}>Tokens</Text>\n      <Text style={styles.metricValue}>{tokens}</Text>\n      <Text style={styles.metricUnit}>$FIXIE</Text>\n      \n      {recentReward > 0 && (\n        <View style={styles.rewardBadge}>\n          <Text style={styles.rewardBadgeText}>+{recentReward}</Text>\n        </View>\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  metricCard: {\n    flex: 1,\n    alignItems: 'center',\n    padding: 8,\n    position: 'relative',\n  },\n  metricLabel: {\n    fontSize: 12,\n    color: '#666',\n    marginBottom: 4,\n  },\n  metricValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  metricUnit: {\n    fontSize: 12,\n    color: '#666',\n  },\n  rewardBadge: {\n    position: 'absolute',\n    top: -8,\n    right: 0,\n    backgroundColor: '#10B981',\n    borderRadius: 12,\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n  },\n  rewardBadgeText: {\n    color: '#fff',\n    fontSize: 12,\n    fontWeight: 'bold',\n  },\n});\n\nexport default TokenCounter;\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devtehen/fixie-run-rewards-mobile/src/hooks/useLocationTracking.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-enum-comparison","severity":2,"message":"The two values in this comparison do not have a shared enum type.","line":59,"column":11,"nodeType":"BinaryExpression","messageId":"mismatchedCondition","endLine":59,"endColumn":41,"suggestions":[{"messageId":"replaceValueWithEnum","fix":{"range":[1968,1977],"text":"PermissionStatus.GRANTED"},"desc":"Replace with an enum value comparison."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":196,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":196,"endColumn":26,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[5979,5979],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[5979,5979],"text":"await "},"desc":"Add await operator."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useRef } from 'react';\nimport * as Location from 'expo-location';\nimport { Alert } from 'react-native';\n\n// Type definitions\ntype LocationData = {\n  coords: {\n    latitude: number;\n    longitude: number;\n    altitude: number | null;\n    accuracy: number | null;\n    speed: number | null;\n  };\n  timestamp: number;\n};\n\ntype TrackingResult = {\n  distance: number;\n  averageSpeed: number;\n  duration: number;\n  path: LocationData[];\n};\n\n// Calculate distance between two coordinates using the Haversine formula\nconst calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number): number => {\n  const R = 6371; // Radius of the earth in km\n  const dLat = deg2rad(lat2 - lat1);\n  const dLon = deg2rad(lon2 - lon1);\n  const a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  return R * c; // Distance in km\n};\n\nconst deg2rad = (deg: number): number => {\n  return deg * (Math.PI / 180);\n};\n\nexport const useLocationTracking = () => {\n  // State for tracking status and metrics\n  const [isTracking, setIsTracking] = useState(false);\n  const [hasPermission, setHasPermission] = useState(false);\n  const [distance, setDistance] = useState(0);\n  const [speed, setSpeed] = useState(0);\n  const [duration, setDuration] = useState(0);\n  \n  // Refs to store location data and interval IDs\n  const locationHistory = useRef<LocationData[]>([]);\n  const startTime = useRef<number | null>(null);\n  const locationSubscription = useRef<Location.LocationSubscription | null>(null);\n  const durationInterval = useRef<NodeJS.Timeout | null>(null);\n  \n  // Request location permissions\n  const requestPermissions = async (): Promise<boolean> => {\n    try {\n      const { status: foregroundStatus } = await Location.requestForegroundPermissionsAsync();\n      \n      if (foregroundStatus !== 'granted') {\n        Alert.alert(\n          'Permission Denied',\n          'Location permission is required to track your activities. Please enable location services.',\n          [{ text: 'OK' }]\n        );\n        return false;\n      }\n      \n      setHasPermission(true);\n      return true;\n    } catch (error) {\n      console.error('Error requesting location permission:', error);\n      return false;\n    }\n  };\n  \n  // Start tracking location\n  const startTracking = async (): Promise<boolean> => {\n    // Check if we already have permission, if not request it\n    if (!hasPermission) {\n      const granted = await requestPermissions();\n      if (!granted) return false;\n    }\n    \n    try {\n      // Configure location tracking\n      \n      // Clear previous data\n      locationHistory.current = [];\n      setDistance(0);\n      setSpeed(0);\n      \n      // Start time tracking\n      startTime.current = Date.now();\n      \n      // Start duration timer\n      durationInterval.current = setInterval(() => {\n        if (startTime.current) {\n          const elapsed = Math.floor((Date.now() - startTime.current) / 1000);\n          setDuration(elapsed);\n        }\n      }, 1000);\n      \n      // Start location tracking\n      locationSubscription.current = await Location.watchPositionAsync(\n        {\n          accuracy: Location.Accuracy.High,\n          timeInterval: 1000,\n          distanceInterval: 1, // update every 1 meter\n        },\n        (location) => {\n          const newLocation: LocationData = {\n            coords: {\n              latitude: location.coords.latitude,\n              longitude: location.coords.longitude,\n              altitude: location.coords.altitude,\n              accuracy: location.coords.accuracy,\n              speed: location.coords.speed,\n            },\n            timestamp: location.timestamp\n          };\n          \n          // Update speed from GPS if available\n          if (location.coords.speed !== null) {\n            // Convert m/s to km/h\n            setSpeed(location.coords.speed * 3.6);\n          }\n          \n          // Calculate distance if we have at least two points\n          if (locationHistory.current.length > 0) {\n            const prevLocation = locationHistory.current[locationHistory.current.length - 1];\n            const segmentDistance = calculateDistance(\n              prevLocation.coords.latitude,\n              prevLocation.coords.longitude,\n              location.coords.latitude,\n              location.coords.longitude\n            );\n            \n            // Only add distance if we've moved at least 1 meter to avoid GPS jitter\n            if (segmentDistance > 0.001) {\n              setDistance((prev) => prev + segmentDistance);\n            }\n          }\n          \n          // Add to history\n          locationHistory.current.push(newLocation);\n        }\n      );\n      \n      setIsTracking(true);\n      return true;\n    } catch (error) {\n      console.error('Error starting location tracking:', error);\n      Alert.alert('Error', 'Failed to start location tracking');\n      return false;\n    }\n  };\n  \n  // Stop tracking and return results\n  const stopTracking = (): TrackingResult => {\n    // Stop location tracking\n    if (locationSubscription.current) {\n      locationSubscription.current.remove();\n      locationSubscription.current = null;\n    }\n    \n    // Stop duration timer\n    if (durationInterval.current) {\n      clearInterval(durationInterval.current);\n      durationInterval.current = null;\n    }\n    \n    // Calculate average speed\n    const averageSpeed = duration > 0 ? (distance / (duration / 3600)) : 0;\n    \n    setIsTracking(false);\n    \n    return {\n      distance,\n      averageSpeed,\n      duration,\n      path: [...locationHistory.current]\n    };\n  };\n  \n  // Reset tracking data\n  const resetTracking = () => {\n    locationHistory.current = [];\n    startTime.current = null;\n    setDistance(0);\n    setSpeed(0);\n    setDuration(0);\n  };\n  \n  // Check permission on mount\n  useEffect(() => {\n    requestPermissions();\n    \n    // Cleanup on unmount\n    return () => {\n      if (locationSubscription.current) {\n        locationSubscription.current.remove();\n      }\n      if (durationInterval.current) {\n        clearInterval(durationInterval.current);\n      }\n    };\n  }, []);\n  \n  return {\n    isTracking,\n    hasPermission,\n    distance,\n    speed,\n    duration,\n    startTracking,\n    stopTracking,\n    resetTracking,\n  };\n};\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devtehen/fixie-run-rewards-mobile/src/navigation/AppNavigator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devtehen/fixie-run-rewards-mobile/src/screens/HomeScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showRewardModal' is assigned a value but never used.","line":61,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setShowRewardModal' is assigned a value but never used.","line":61,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'rewardModalData' is assigned a value but never used.","line":62,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setRewardModalData' is assigned a value but never used.","line":62,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'hasPermission' is assigned a value but never used.","line":67,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":18},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":98,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":98,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3075,3075],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3075,3075],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":225,"column":21,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":225,"endColumn":34},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":226,"column":22,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":226,"endColumn":36},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'alignItems' should be before 'justifyContent'.","line":255,"column":5,"nodeType":"CallExpression","endLine":255,"endColumn":15,"fix":{"range":[7675,7738],"text":"alignItems: 'center',\n    flex: 1,\n    justifyContent: 'center'"}},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected class names to be in ascending order. 'container' should be before 'loadingContainer'.","line":257,"column":3,"nodeType":"CallExpression","endLine":257,"endColumn":12,"fix":{"range":[7651,9064],"text":"achievementsList: {\n    gap: 12,\n  },\n  achievementsSection: {\n    marginBottom: 20,\n  },\n  activityCard: {\n    backgroundColor: '#fff',\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 24,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 2,\n  },\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n  },\n  duration: {\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  header: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  headerContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 24,\n    width: '100%',\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  metricsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 16,\n  },\n  profileButton: {\n    backgroundColor: '#3B82F6',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderRadius: 20,\n    alignSelf: 'flex-start',\n  },\n  profileButtonText: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 14,\n  },\n  scrollContent: {\n    padding: 16,\n  },\n  sectionTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 12,\n  },\n  subtitle: {\n    fontSize: 14,\n    color: '#666',\n    marginBottom: 8,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 4,\n  }"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#f5f5f5' }","line":257,"column":14,"nodeType":"ObjectExpression","endLine":260,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'backgroundColor' should be before 'flex'.","line":259,"column":5,"nodeType":"CallExpression","endLine":259,"endColumn":20,"fix":{"range":[7764,7803],"text":"backgroundColor: '#f5f5f5',\n    flex: 1"}},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'alignItems' should be before 'justifyContent'.","line":267,"column":5,"nodeType":"CallExpression","endLine":267,"endColumn":15,"fix":{"range":[7876,7963],"text":"alignItems: 'flex-start',\n    flexDirection: 'row',\n    justifyContent: 'space-between'"}},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'alignItems' should be before 'flex'.","line":273,"column":5,"nodeType":"CallExpression","endLine":273,"endColumn":15,"fix":{"range":[8027,8060],"text":"alignItems: 'center',\n    flex: 1"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#3B82F6' }","line":275,"column":18,"nodeType":"ObjectExpression","endLine":281,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'paddingHorizontal' should be before 'paddingVertical'.","line":278,"column":5,"nodeType":"CallExpression","endLine":278,"endColumn":22,"fix":{"range":[8090,8218],"text":"alignSelf: 'flex-start',\n    backgroundColor: '#3B82F6',\n    borderRadius: 20,\n    paddingHorizontal: 16,\n    paddingVertical: 8"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#fff' }","line":282,"column":22,"nodeType":"ObjectExpression","endLine":286,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'fontSize' should be before 'fontWeight'.","line":285,"column":5,"nodeType":"CallExpression","endLine":285,"endColumn":13,"fix":{"range":[8271,8307],"text":"fontSize: 14,\n    fontWeight: 'bold'"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#666' }","line":292,"column":13,"nodeType":"ObjectExpression","endLine":296,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'color' should be before 'fontSize'.","line":294,"column":5,"nodeType":"CallExpression","endLine":294,"endColumn":10,"fix":{"range":[8411,8442],"text":"color: '#666',\n    fontSize: 14"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#fff', shadowColor: '#000' }","line":301,"column":17,"nodeType":"ObjectExpression","endLine":311,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'marginBottom' should be before 'padding'.","line":305,"column":5,"nodeType":"CallExpression","endLine":305,"endColumn":17,"fix":{"range":[8604,8768],"text":"elevation: 2,\n    marginBottom: 24,\n    padding: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4"}}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":9,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  View, \n  Text, \n  StyleSheet, \n  SafeAreaView, \n  ScrollView, \n  Alert,\n  TouchableOpacity\n} from 'react-native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { RootStackParamList } from '../navigation/AppNavigator';\nimport { useLocationTracking } from '../hooks/useLocationTracking';\n\n// Import component files\nimport ActivityMode from '../components/ActivityMode';\nimport MetricCard from '../components/MetricCard';\nimport TokenCounter from '../components/TokenCounter';\nimport ActivityControls from '../components/ActivityControls';\nimport RewardIndicator from '../components/RewardIndicator';\nimport AchievementCard from '../components/AchievementCard';\n\n// Import formatters\nimport { formatDistance, formatSpeed, formatDuration } from '../utils/formatters';\n\n// Import services and utilities\nimport { \n  calculateTokens, \n  getNextRewardDistance, \n  calculateAchievementProgress,\n  DEFAULT_ACHIEVEMENTS,\n  DEFAULT_USER_STATS,\n  Activity,\n  Achievement,\n  UserStats,\n  updateUserStats\n} from '../services/activityService';\nimport {\n  loadTokens,\n  saveTokens,\n  loadAchievements,\n  saveAchievements,\n  loadUserStats,\n  saveUserStats\n} from '../utils/storage';\n\n// Define types for navigation props\ntype HomeScreenProps = {\n  navigation: StackNavigationProp<RootStackParamList, 'Home'>;\n};\n// Default achievements and utility functions are now imported from activityService\n\nconst HomeScreen: React.FC<HomeScreenProps> = ({ navigation }) => {\n  const [mode, setMode] = useState<'run' | 'bike'>('run');\n  const [tokens, setTokens] = useState(0);\n  const [recentReward, setRecentReward] = useState(0);\n  const [nextRewardDistance, setNextRewardDistance] = useState(5.0);\n  const [achievements, setAchievements] = useState<Achievement[]>(DEFAULT_ACHIEVEMENTS);\n  const [userStats, setUserStats] = useState<UserStats>(DEFAULT_USER_STATS);\n  const [isLoading, setIsLoading] = useState(true);\n  const [showRewardModal, setShowRewardModal] = useState(false);\n  const [rewardModalData, setRewardModalData] = useState({ tokens: 0, distance: 0 });\n  \n  // Use the location tracking hook\n  const {\n    isTracking,\n    hasPermission,\n    distance,\n    speed,\n    duration,\n    startTracking,\n    stopTracking,\n    resetTracking\n  } = useLocationTracking();\n  \n  // Load user data from storage on component mount\n  useEffect(() => {\n    const loadUserData = async () => {\n      try {\n        setIsLoading(true);\n        \n        // Load tokens, achievements, and user stats from storage\n        const storedTokens = await loadTokens();\n        const storedAchievements = await loadAchievements();\n        const storedUserStats = await loadUserStats();\n        \n        setTokens(storedTokens);\n        setAchievements(storedAchievements);\n        setUserStats(storedUserStats);\n      } catch (error) {\n        console.error('Error loading user data:', error);\n        Alert.alert('Error', 'Failed to load your saved data.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    loadUserData();\n  }, []);\n  \n  // Update next reward distance when current distance changes\n  useEffect(() => {\n    if (isTracking) {\n      setNextRewardDistance(getNextRewardDistance(distance));\n    }\n  }, [distance, isTracking]);\n  \n  // No need for a separate location permission check since it's handled by the hook\n  \n  \n  const handleStart = async () => {\n    const success = await startTracking();\n    if (success) {\n      Alert.alert('Started Tracking', `${mode === 'run' ? 'Run' : 'Bike ride'} started!`);\n    }\n  };\n  const handleFinish = async () => {\n    try {\n      const result = stopTracking();\n      \n      // Create activity object\n      const activity: Activity = {\n        type: mode,\n        distance: result.distance,\n        averageSpeed: result.averageSpeed,\n        duration: result.duration,\n        completed: true\n      };\n      \n      // Calculate tokens earned\n      const newTokens = calculateTokens(result.distance, mode);\n      const updatedTokens = tokens + newTokens;\n      \n      if (newTokens > 0) {\n        setTokens(updatedTokens);\n        setRecentReward(newTokens);\n        \n        // Show reward alert\n        Alert.alert(\n          'Reward Earned!',\n          `You earned ${newTokens} $FIXIE tokens for your ${result.distance.toFixed(2)} km ${mode}!`\n        );\n        \n        // Save tokens to storage\n        await saveTokens(updatedTokens);\n      }\n      \n      // Update and save achievements\n      const updatedAchievements = calculateAchievementProgress(achievements, activity);\n      setAchievements(updatedAchievements);\n      await saveAchievements(updatedAchievements);\n      \n      // Update and save user stats\n      const updatedStats = updateUserStats(userStats, activity, newTokens);\n      setUserStats(updatedStats);\n      await saveUserStats(updatedStats);\n      \n      // Reset for next activity\n      resetTracking();\n    } catch (error) {\n      console.error('Error finishing activity:', error);\n      Alert.alert('Error', 'Failed to save your activity data.');\n      resetTracking();\n    }\n  };\n  // Render loading state\n  if (isLoading) {\n    return (\n      <SafeAreaView style={styles.container}>\n        <View style={styles.loadingContainer}>\n          <Text>Loading your data...</Text>\n        </View>\n      </SafeAreaView>\n    );\n  }\n  \n  // Handle navigation to profile screen\n  const handleNavigateToProfile = () => {\n    navigation.navigate('Profile');\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView contentContainerStyle={styles.scrollContent}>\n        <View style={styles.headerContainer}>\n          <View style={styles.header}>\n            <Text style={styles.title}>FixieRun</Text>\n            <Text style={styles.subtitle}>Earn $FIXIE Tokens While Running</Text>\n            <Text style={styles.duration}>{formatDuration(duration)}</Text>\n          </View>\n          <TouchableOpacity \n            style={styles.profileButton} \n            onPress={handleNavigateToProfile}\n          >\n            <Text style={styles.profileButtonText}>Profile</Text>\n          </TouchableOpacity>\n        </View>\n        \n        <View style={styles.activityCard}>\n          <ActivityMode \n            mode={mode} \n            setMode={setMode} \n            disabled={isTracking}\n          />\n          \n          <View style={styles.metricsContainer}>\n            <MetricCard \n              label=\"Distance\" \n              value={formatDistance(distance)} \n              unit=\"km\" \n            />\n            <MetricCard \n              label=\"Speed\" \n              value={formatSpeed(speed)} \n              unit=\"km/h\" \n            />\n            <TokenCounter \n              tokens={tokens} \n              recentReward={recentReward} \n            />\n          </View>\n          \n          <ActivityControls \n            isTracking={isTracking} \n            onStart={handleStart} \n            onFinish={handleFinish} \n          />\n          \n          <RewardIndicator \n            currentDistance={distance} \n            nextRewardDistance={nextRewardDistance} \n          />\n        </View>\n        \n        <View style={styles.achievementsSection}>\n          <Text style={styles.sectionTitle}>Achievements</Text>\n          <View style={styles.achievementsList}>\n            {achievements.map((achievement) => (\n              <AchievementCard \n                key={achievement.id} \n                achievement={achievement} \n              />\n            ))}\n          </View>\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n  },\n  scrollContent: {\n    padding: 16,\n  },\n  headerContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 24,\n    width: '100%',\n  },\n  header: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  profileButton: {\n    backgroundColor: '#3B82F6',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    borderRadius: 20,\n    alignSelf: 'flex-start',\n  },\n  profileButtonText: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 14,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 4,\n  },\n  subtitle: {\n    fontSize: 14,\n    color: '#666',\n    marginBottom: 8,\n  },\n  duration: {\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  activityCard: {\n    backgroundColor: '#fff',\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 24,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 2,\n  },\n  metricsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 16,\n  },\n  achievementsSection: {\n    marginBottom: 20,\n  },\n  sectionTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 12,\n  },\n  achievementsList: {\n    gap: 12,\n  },\n});\n\nexport default HomeScreen;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devtehen/fixie-run-rewards-mobile/src/screens/NotFoundScreen.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":21,"column":23,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[723,803],"text":"\n          The page you&apos;re looking for doesn't exist or has been moved.\n        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[723,803],"text":"\n          The page you&lsquo;re looking for doesn't exist or has been moved.\n        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[723,803],"text":"\n          The page you&#39;re looking for doesn't exist or has been moved.\n        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[723,803],"text":"\n          The page you&rsquo;re looking for doesn't exist or has been moved.\n        "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":21,"column":44,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[723,803],"text":"\n          The page you're looking for doesn&apos;t exist or has been moved.\n        "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[723,803],"text":"\n          The page you're looking for doesn&lsquo;t exist or has been moved.\n        "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[723,803],"text":"\n          The page you're looking for doesn&#39;t exist or has been moved.\n        "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[723,803],"text":"\n          The page you're looking for doesn&rsquo;t exist or has been moved.\n        "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#f5f5f5' }","line":33,"column":14,"nodeType":"ObjectExpression","endLine":36,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'backgroundColor' should be before 'flex'.","line":35,"column":5,"nodeType":"CallExpression","endLine":35,"endColumn":20,"fix":{"range":[1079,1118],"text":"backgroundColor: '#f5f5f5',\n    flex: 1"}},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'alignItems' should be before 'justifyContent'.","line":40,"column":5,"nodeType":"CallExpression","endLine":40,"endColumn":15,"fix":{"range":[1142,1205],"text":"alignItems: 'center',\n    flex: 1,\n    justifyContent: 'center'"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#3B82F6' }","line":43,"column":10,"nodeType":"ObjectExpression","endLine":48,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'color' should be before 'fontWeight'.","line":46,"column":5,"nodeType":"CallExpression","endLine":46,"endColumn":10,"fix":{"range":[1244,1302],"text":"color: '#3B82F6',\n    fontSize: 64,\n    fontWeight: 'bold'"}},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected class names to be in ascending order. 'subtitle' should be before 'title'.","line":49,"column":3,"nodeType":"CallExpression","endLine":49,"endColumn":11,"fix":{"range":[1062,1717],"text":"button: {\n    backgroundColor: '#3B82F6',\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    borderRadius: 8,\n  },\n  buttonText: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  message: {\n    fontSize: 16,\n    color: '#666',\n    textAlign: 'center',\n    marginBottom: 32,\n  },\n  subtitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 16,\n  },\n  title: {\n    fontSize: 64,\n    fontWeight: 'bold',\n    color: '#3B82F6',\n    marginBottom: 8,\n  }"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#666' }","line":54,"column":12,"nodeType":"ObjectExpression","endLine":59,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'color' should be before 'fontSize'.","line":56,"column":5,"nodeType":"CallExpression","endLine":56,"endColumn":10,"fix":{"range":[1430,1508],"text":"color: '#666',\n    fontSize: 16,\n    marginBottom: 32,\n    textAlign: 'center'"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#3B82F6' }","line":60,"column":11,"nodeType":"ObjectExpression","endLine":65,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'paddingHorizontal' should be before 'paddingVertical'.","line":63,"column":5,"nodeType":"CallExpression","endLine":63,"endColumn":22,"fix":{"range":[1563,1630],"text":"borderRadius: 8,\n    paddingHorizontal: 24,\n    paddingVertical: 12"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#fff' }","line":66,"column":15,"nodeType":"ObjectExpression","endLine":70,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'fontSize' should be before 'fontWeight'.","line":69,"column":5,"nodeType":"CallExpression","endLine":69,"endColumn":13,"fix":{"range":[1676,1712],"text":"fontSize: 16,\n    fontWeight: 'bold'"}}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":7,"fixableWarningCount":0,"source":"import React from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity, SafeAreaView } from 'react-native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { RootStackParamList } from '../navigation/AppNavigator';\n\ntype NotFoundScreenProps = {\n  navigation: StackNavigationProp<RootStackParamList, 'NotFound'>;\n};\n\nconst NotFoundScreen: React.FC<NotFoundScreenProps> = ({ navigation }) => {\n  const handleGoHome = () => {\n    navigation.navigate('Home');\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.content}>\n        <Text style={styles.title}>404</Text>\n        <Text style={styles.subtitle}>Page Not Found</Text>\n        <Text style={styles.message}>\n          The page you're looking for doesn't exist or has been moved.\n        </Text>\n        \n        <TouchableOpacity style={styles.button} onPress={handleGoHome}>\n          <Text style={styles.buttonText}>Go Back Home</Text>\n        </TouchableOpacity>\n      </View>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 64,\n    fontWeight: 'bold',\n    color: '#3B82F6',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 16,\n  },\n  message: {\n    fontSize: 16,\n    color: '#666',\n    textAlign: 'center',\n    marginBottom: 32,\n  },\n  button: {\n    backgroundColor: '#3B82F6',\n    paddingVertical: 12,\n    paddingHorizontal: 24,\n    borderRadius: 8,\n  },\n  buttonText: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n});\n\nexport default NotFoundScreen;\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devtehen/fixie-run-rewards-mobile/src/screens/ProfileScreen.tsx","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":40,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":40,"endColumn":17,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[1197,1197],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[1197,1197],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#f5f5f5' }","line":116,"column":14,"nodeType":"ObjectExpression","endLine":119,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'backgroundColor' should be before 'flex'.","line":118,"column":5,"nodeType":"CallExpression","endLine":118,"endColumn":20,"fix":{"range":[4042,4081],"text":"backgroundColor: '#f5f5f5',\n    flex: 1"}},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'alignItems' should be before 'justifyContent'.","line":123,"column":5,"nodeType":"CallExpression","endLine":123,"endColumn":15,"fix":{"range":[4114,4177],"text":"alignItems: 'center',\n    flex: 1,\n    justifyContent: 'center'"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#666' }","line":125,"column":16,"nodeType":"ObjectExpression","endLine":129,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'fontSize' should be before 'marginTop'.","line":127,"column":5,"nodeType":"CallExpression","endLine":127,"endColumn":13,"fix":{"range":[4205,4255],"text":"color: '#666',\n    fontSize: 16,\n    marginTop: 12"}},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected class names to be in ascending order. 'header' should be before 'scrollContent'.","line":133,"column":3,"nodeType":"CallExpression","endLine":133,"endColumn":9,"fix":{"range":[4025,5500],"text":"backButton: {\n    backgroundColor: '#3B82F6',\n    borderRadius: 8,\n    paddingVertical: 12,\n    alignItems: 'center',\n    marginTop: 12,\n  },\n  backButtonText: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n  },\n  header: {\n    marginBottom: 24,\n    alignItems: 'center',\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingText: {\n    marginTop: 12,\n    fontSize: 16,\n    color: '#666',\n  },\n  scrollContent: {\n    padding: 16,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginVertical: 12,\n  },\n  statCard: {\n    backgroundColor: '#fff',\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 2,\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  statLabel: {\n    fontSize: 14,\n    color: '#666',\n    textAlign: 'center',\n  },\n  statRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    gap: 12,\n    marginBottom: 12,\n  },\n  statValue: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    color: '#3B82F6',\n    marginBottom: 8,\n  },\n  statsContainer: {\n    marginBottom: 24,\n  },\n  subtitle: {\n    fontSize: 14,\n    color: '#666',\n    marginBottom: 8,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 4,\n  }"}},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'alignItems' should be before 'marginBottom'.","line":135,"column":5,"nodeType":"CallExpression","endLine":135,"endColumn":15,"fix":{"range":[4319,4361],"text":"alignItems: 'center',\n    marginBottom: 24"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#666' }","line":142,"column":13,"nodeType":"ObjectExpression","endLine":146,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'color' should be before 'fontSize'.","line":144,"column":5,"nodeType":"CallExpression","endLine":144,"endColumn":10,"fix":{"range":[4465,4496],"text":"color: '#666',\n    fontSize: 14"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#fff', shadowColor: '#000' }","line":150,"column":13,"nodeType":"ObjectExpression","endLine":163,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'marginBottom' should be before 'padding'.","line":154,"column":5,"nodeType":"CallExpression","endLine":154,"endColumn":17,"fix":{"range":[4589,4873],"text":"alignItems: 'center',\n    backgroundColor: '#fff',\n    borderRadius: 12,\n    elevation: 2,\n    flex: 1,\n    justifyContent: 'center',\n    marginBottom: 12,\n    padding: 16,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4"}},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'gap' should be before 'justifyContent'.","line":167,"column":5,"nodeType":"CallExpression","endLine":167,"endColumn":8,"fix":{"range":[4923,4967],"text":"gap: 12,\n    justifyContent: 'space-between'"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#3B82F6' }","line":170,"column":14,"nodeType":"ObjectExpression","endLine":175,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'color' should be before 'fontWeight'.","line":173,"column":5,"nodeType":"CallExpression","endLine":173,"endColumn":10,"fix":{"range":[5015,5073],"text":"color: '#3B82F6',\n    fontSize: 32,\n    fontWeight: 'bold'"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#666' }","line":176,"column":14,"nodeType":"ObjectExpression","endLine":180,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'color' should be before 'fontSize'.","line":178,"column":5,"nodeType":"CallExpression","endLine":178,"endColumn":10,"fix":{"range":[5120,5151],"text":"color: '#666',\n    fontSize: 14"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { backgroundColor: '#3B82F6' }","line":186,"column":15,"nodeType":"ObjectExpression","endLine":192,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'alignItems' should be before 'paddingVertical'.","line":190,"column":5,"nodeType":"CallExpression","endLine":190,"endColumn":15,"fix":{"range":[5292,5409],"text":"alignItems: 'center',\n    backgroundColor: '#3B82F6',\n    borderRadius: 8,\n    marginTop: 12,\n    paddingVertical: 12"}},{"ruleId":"react-native/no-color-literals","severity":2,"message":"Color literal: { color: '#fff' }","line":193,"column":19,"nodeType":"ObjectExpression","endLine":197,"endColumn":4},{"ruleId":"react-native/sort-styles","severity":2,"message":"Expected style properties to be in ascending order. 'fontSize' should be before 'fontWeight'.","line":196,"column":5,"nodeType":"CallExpression","endLine":196,"endColumn":13,"fix":{"range":[5459,5495],"text":"fontSize: 16,\n    fontWeight: 'bold'"}}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":12,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { \n  View, \n  Text, \n  StyleSheet, \n  SafeAreaView, \n  ScrollView, \n  TouchableOpacity, \n  ActivityIndicator,\n  Alert\n} from 'react-native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { RootStackParamList } from '../navigation/AppNavigator';\nimport { loadUserStats } from '../utils/storage';\nimport { UserStats, DEFAULT_USER_STATS } from '../services/activityService';\nimport { formatDistance } from '../utils/formatters';\n\ntype ProfileScreenProps = {\n  navigation: StackNavigationProp<RootStackParamList, 'Profile'>;\n};\n\nconst ProfileScreen: React.FC<ProfileScreenProps> = ({ navigation }) => {\n  const [userStats, setUserStats] = useState<UserStats>(DEFAULT_USER_STATS);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const loadStats = async () => {\n      try {\n        setIsLoading(true);\n        const stats = await loadUserStats();\n        setUserStats(stats);\n      } catch (error) {\n        console.error('Error loading user stats:', error);\n        Alert.alert('Error', 'Failed to load your statistics.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadStats();\n  }, []);\n\n  if (isLoading) {\n    return (\n      <SafeAreaView style={styles.container}>\n        <View style={styles.loadingContainer}>\n          <ActivityIndicator size=\"large\" color=\"#3B82F6\" />\n          <Text style={styles.loadingText}>Loading your statistics...</Text>\n        </View>\n      </SafeAreaView>\n    );\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView contentContainerStyle={styles.scrollContent}>\n        <View style={styles.header}>\n          <Text style={styles.title}>Your Profile</Text>\n          <Text style={styles.subtitle}>Track your progress and achievements</Text>\n        </View>\n\n        <View style={styles.statsContainer}>\n          <View style={styles.statCard}>\n            <Text style={styles.statValue}>{userStats.totalTokens}</Text>\n            <Text style={styles.statLabel}>Total $FIXIE Tokens</Text>\n          </View>\n\n          <View style={styles.statRow}>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{userStats.totalActivities}</Text>\n              <Text style={styles.statLabel}>Total Activities</Text>\n            </View>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{formatDistance(userStats.totalRunDistance + userStats.totalBikeDistance)}</Text>\n              <Text style={styles.statLabel}>Total Distance (km)</Text>\n            </View>\n          </View>\n\n          <Text style={styles.sectionTitle}>Activity Breakdown</Text>\n          \n          <View style={styles.statRow}>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{userStats.runActivities}</Text>\n              <Text style={styles.statLabel}>Runs</Text>\n            </View>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{formatDistance(userStats.totalRunDistance)}</Text>\n              <Text style={styles.statLabel}>Run Distance (km)</Text>\n            </View>\n          </View>\n\n          <View style={styles.statRow}>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{userStats.bikeActivities}</Text>\n              <Text style={styles.statLabel}>Bike Rides</Text>\n            </View>\n            <View style={styles.statCard}>\n              <Text style={styles.statValue}>{formatDistance(userStats.totalBikeDistance)}</Text>\n              <Text style={styles.statLabel}>Bike Distance (km)</Text>\n            </View>\n          </View>\n        </View>\n\n        <TouchableOpacity \n          style={styles.backButton} \n          onPress={() => navigation.navigate('Home')}\n        >\n          <Text style={styles.backButtonText}>Return to Dashboard</Text>\n        </TouchableOpacity>\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n  },\n  loadingContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  loadingText: {\n    marginTop: 12,\n    fontSize: 16,\n    color: '#666',\n  },\n  scrollContent: {\n    padding: 16,\n  },\n  header: {\n    marginBottom: 24,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 4,\n  },\n  subtitle: {\n    fontSize: 14,\n    color: '#666',\n    marginBottom: 8,\n  },\n  statsContainer: {\n    marginBottom: 24,\n  },\n  statCard: {\n    backgroundColor: '#fff',\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 12,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 2,\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  statRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    gap: 12,\n    marginBottom: 12,\n  },\n  statValue: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    color: '#3B82F6',\n    marginBottom: 8,\n  },\n  statLabel: {\n    fontSize: 14,\n    color: '#666',\n    textAlign: 'center',\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginVertical: 12,\n  },\n  backButton: {\n    backgroundColor: '#3B82F6',\n    borderRadius: 8,\n    paddingVertical: 12,\n    alignItems: 'center',\n    marginTop: 12,\n  },\n  backButtonText: {\n    color: '#fff',\n    fontWeight: 'bold',\n    fontSize: 16,\n  },\n});\n\nexport default ProfileScreen;\n\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devtehen/fixie-run-rewards-mobile/src/services/activityService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devtehen/fixie-run-rewards-mobile/src/utils/formatters.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/devtehen/fixie-run-rewards-mobile/src/utils/storage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]