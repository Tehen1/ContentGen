#!/usr/bin/env python3
"""
Domain Hunter Pro - D√©monstration du Scraper
Ce script simule le scraping de domaines expir√©s avec des donn√©es r√©alistes
"""

import json
import csv
import time
import random
from datetime import datetime
import sqlite3
from typing import List, Dict
from dataclasses import dataclass

@dataclass
class DemoExpiredDomain:
    domain: str
    source: str
    da: int = None
    pa: int = None
    backlinks: int = None
    price: float = None
    extension: str = None
    discovered_at: str = None
    
    def __post_init__(self):
        if self.discovered_at is None:
            self.discovered_at = datetime.now().isoformat()
        if self.extension is None:
            self.extension = '.' + self.domain.split('.')[-1]

class DemoScraper:
    def __init__(self):
        self.demo_domains = [
            # Domaines tech/marketing premium
            {'domain': 'seo-marketing-expert.com', 'da': 45, 'pa': 52, 'backlinks': 1250, 'price': 450},
            {'domain': 'digital-growth-agency.net', 'da': 38, 'pa': 44, 'backlinks': 890, 'price': 320},
            {'domain': 'tech-startup-blog.org', 'da': 42, 'pa': 48, 'backlinks': 1100, 'price': 380},
            {'domain': 'affiliate-income-pro.com', 'da': 35, 'pa': 41, 'backlinks': 750, 'price': 280},
            {'domain': 'web-development-tools.net', 'da': 33, 'pa': 39, 'backlinks': 680, 'price': 250},
            
            # Domaines business/finance
            {'domain': 'business-consulting-firm.com', 'da': 40, 'pa': 46, 'backlinks': 950, 'price': 420},
            {'domain': 'online-marketing-hub.org', 'da': 37, 'pa': 43, 'backlinks': 820, 'price': 310},
            {'domain': 'ecommerce-solutions-pro.com', 'da': 39, 'pa': 45, 'backlinks': 880, 'price': 350},
            {'domain': 'digital-transformation.net', 'da': 41, 'pa': 47, 'backlinks': 1050, 'price': 390},
            {'domain': 'startup-funding-guide.com', 'da': 36, 'pa': 42, 'backlinks': 770, 'price': 290},
            
            # Domaines lifestyle/health
            {'domain': 'fitness-nutrition-blog.com', 'da': 34, 'pa': 40, 'backlinks': 650, 'price': 240},
            {'domain': 'healthy-lifestyle-tips.org', 'da': 32, 'pa': 38, 'backlinks': 590, 'price': 220},
            {'domain': 'wellness-coaching-pro.com', 'da': 38, 'pa': 44, 'backlinks': 840, 'price': 330},
            {'domain': 'beauty-skincare-reviews.net', 'da': 35, 'pa': 41, 'backlinks': 720, 'price': 270},
            {'domain': 'mindfulness-meditation.com', 'da': 33, 'pa': 39, 'backlinks': 610, 'price': 230},
            
            # Domaines √©ducation/formation
            {'domain': 'online-learning-platform.com', 'da': 43, 'pa': 49, 'backlinks': 1180, 'price': 410},
            {'domain': 'professional-training.org', 'da': 39, 'pa': 45, 'backlinks': 900, 'price': 340},
            {'domain': 'skill-development-hub.net', 'da': 36, 'pa': 42, 'backlinks': 780, 'price': 300},
            {'domain': 'career-advancement-tips.com', 'da': 34, 'pa': 40, 'backlinks': 670, 'price': 260},
            {'domain': 'leadership-coaching.com', 'da': 37, 'pa': 43, 'backlinks': 810, 'price': 320},
            
            # Domaines tech sp√©cialis√©s
            {'domain': 'cloud-computing-solutions.com', 'da': 44, 'pa': 50, 'backlinks': 1220, 'price': 440},
            {'domain': 'ai-machine-learning-blog.net', 'da': 41, 'pa': 47, 'backlinks': 1020, 'price': 380},
            {'domain': 'cybersecurity-consulting.org', 'da': 40, 'pa': 46, 'backlinks': 970, 'price': 360},
            {'domain': 'blockchain-development.com', 'da': 38, 'pa': 44, 'backlinks': 860, 'price': 340},
            {'domain': 'data-analytics-pro.net', 'da': 42, 'pa': 48, 'backlinks': 1080, 'price': 400},
            
            # Domaines avec potentiel moyen
            {'domain': 'travel-adventure-blog.com', 'da': 30, 'pa': 36, 'backlinks': 520, 'price': 180},
            {'domain': 'food-recipe-collection.org', 'da': 28, 'pa': 34, 'backlinks': 480, 'price': 160},
            {'domain': 'home-improvement-tips.net', 'da': 31, 'pa': 37, 'backlinks': 560, 'price': 190},
            {'domain': 'photography-portfolio.com', 'da': 29, 'pa': 35, 'backlinks': 500, 'price': 170},
            {'domain': 'fashion-style-trends.com', 'da': 32, 'pa': 38, 'backlinks': 580, 'price': 200},
        ]
        
        self.sources = [
            'expireddomains.net',
            'dropcatch.com', 
            'godaddy_auctions',
            'snapnames.com',
            'pendingdelete.com'
        ]
    
    def simulate_scraping(self, num_domains: int = 20) -> List[DemoExpiredDomain]:
        """Simule le scraping de domaines"""
        print("üï∑Ô∏è  DOMAIN HUNTER PRO - D√âMONSTRATION DE SCRAPING")
        print("=" * 60)
        print("üöÄ Simulation du scraping en cours...")
        print()
        
        scraped_domains = []
        selected_domains = random.sample(self.demo_domains, min(num_domains, len(self.demo_domains)))
        
        for i, domain_data in enumerate(selected_domains, 1):
            # Simulation du d√©lai de scraping
            time.sleep(0.5)
            
            # Ajouter de la variabilit√© r√©aliste
            da_variation = random.randint(-5, 5)
            price_variation = random.uniform(0.8, 1.2)
            backlinks_variation = random.uniform(0.7, 1.3)
            
            source = random.choice(self.sources)
            
            domain = DemoExpiredDomain(
                domain=domain_data['domain'],
                source=source,
                da=max(1, domain_data['da'] + da_variation),
                pa=max(1, domain_data['pa'] + da_variation),
                backlinks=int(domain_data['backlinks'] * backlinks_variation),
                price=round(domain_data['price'] * price_variation, 2)
            )
            
            scraped_domains.append(domain)
            
            # Affichage du progr√®s
            if i % 5 == 0 or i == len(selected_domains):
                print(f"   ‚úÖ {i}/{len(selected_domains)} domaines scrap√©s depuis {source}")
        
        print(f"\nüìä R√âSULTATS DU SCRAPING:")
        print(f"   Total scrap√©: {len(scraped_domains)}")
        print(f"   Sources utilis√©es: {len(set(d.source for d in scraped_domains))}")
        
        return scraped_domains
    
    def filter_quality_domains(self, domains: List[DemoExpiredDomain]) -> List[DemoExpiredDomain]:
        """Filtre les domaines selon des crit√®res de qualit√©"""
        print("\nüîç APPLICATION DES FILTRES DE QUALIT√â...")
        
        quality_domains = []
        
        for domain in domains:
            score = 0
            reasons = []
            
            # Score DA/PA
            if domain.da >= 35:
                score += 30
                reasons.append(f"DA √©lev√© ({domain.da})")
            elif domain.da >= 25:
                score += 20
                reasons.append(f"DA correct ({domain.da})")
            
            # Score backlinks
            if domain.backlinks >= 800:
                score += 25
                reasons.append(f"Nombreux backlinks ({domain.backlinks})")
            elif domain.backlinks >= 500:
                score += 15
                reasons.append(f"Backlinks corrects ({domain.backlinks})")
            
            # Score nom de domaine
            domain_name = domain.domain.lower()
            valuable_keywords = ['seo', 'marketing', 'business', 'tech', 'digital', 'pro', 'expert']
            
            if any(kw in domain_name for kw in valuable_keywords):
                score += 20
                reasons.append("Mots-cl√©s valoris√©s")
            
            # Score extension
            if domain.extension == '.com':
                score += 15
                reasons.append("Extension premium")
            elif domain.extension in ['.net', '.org']:
                score += 10
                reasons.append("Extension correcte")
            
            # Score prix/valeur
            if domain.price and domain.price < 300:
                score += 10
                reasons.append("Prix attractif")
            
            # Garder si score >= 60
            if score >= 60:
                quality_domains.append(domain)
                print(f"   ‚úÖ {domain.domain} - Score: {score} ({', '.join(reasons)})")
            else:
                print(f"   ‚ùå {domain.domain} - Score: {score} (insuffisant)")
        
        print(f"\nüìà FILTRAGE TERMIN√â:")
        print(f"   Avant filtrage: {len(domains)}")
        print(f"   Apr√®s filtrage: {len(quality_domains)}")
        print(f"   Taux de qualit√©: {len(quality_domains)/len(domains)*100:.1f}%")
        
        return quality_domains
    
    def calculate_roi_projections(self, domains: List[DemoExpiredDomain]) -> List[Dict]:
        """Calcule les projections ROI"""
        print("\nüí∞ CALCUL DES PROJECTIONS ROI...")
        
        projections = []
        
        for domain in domains:
            # Calcul de la valeur estim√©e bas√©e sur les m√©triques
            base_value = domain.price * 2  # Base: 2x le prix d'achat
            
            # Bonus selon DA
            if domain.da >= 40:
                da_multiplier = 1.5
            elif domain.da >= 30:
                da_multiplier = 1.3
            else:
                da_multiplier = 1.1
            
            # Bonus selon backlinks
            if domain.backlinks >= 1000:
                bl_multiplier = 1.4
            elif domain.backlinks >= 500:
                bl_multiplier = 1.2
            else:
                bl_multiplier = 1.0
            
            # Bonus nom de domaine
            domain_name = domain.domain.lower()
            if any(kw in domain_name for kw in ['seo', 'marketing', 'business']):
                name_multiplier = 1.3
            elif any(kw in domain_name for kw in ['tech', 'digital', 'pro']):
                name_multiplier = 1.2
            else:
                name_multiplier = 1.0
            
            # Calcul final
            estimated_value = base_value * da_multiplier * bl_multiplier * name_multiplier
            estimated_value = round(estimated_value, 2)
            
            roi_percentage = round(((estimated_value - domain.price) / domain.price) * 100, 1)
            
            # Recommandation
            if roi_percentage >= 250:
                recommendation = "ACHETER RAPIDEMENT"
                priority = "üî• URGENT"
            elif roi_percentage >= 150:
                recommendation = "ACHETER"
                priority = "‚≠ê RECOMMAND√â"
            elif roi_percentage >= 100:
                recommendation = "SURVEILLER"
                priority = "üëÄ INT√âRESSANT"
            else:
                recommendation = "√âVITER"
                priority = "‚ùå PASSER"
            
            projection = {
                'domain': domain.domain,
                'purchase_price': domain.price,
                'estimated_value': estimated_value,
                'roi_percentage': roi_percentage,
                'recommendation': recommendation,
                'priority': priority,
                'da': domain.da,
                'backlinks': domain.backlinks,
                'source': domain.source
            }
            
            projections.append(projection)
        
        # Trier par ROI d√©croissant
        projections.sort(key=lambda x: x['roi_percentage'], reverse=True)
        
        print(f"\nüèÜ TOP 10 DES OPPORTUNIT√âS:")
        print("-" * 80)
        
        for i, proj in enumerate(projections[:10], 1):
            print(f"{i:2d}. {proj['priority']} {proj['domain'][:30]:<30}")
            print(f"    üí∞ Prix: {proj['purchase_price']:>6.0f}‚Ç¨ ‚Üí Valeur: {proj['estimated_value']:>7.0f}‚Ç¨ | ROI: {proj['roi_percentage']:>6.1f}%")
            print(f"    üìä DA: {proj['da']:>2d} | Backlinks: {proj['backlinks']:>5d} | Source: {proj['source']}")
            print()
        
        return projections
    
    def export_results(self, projections: List[Dict], filename: str = None) -> str:
        """Exporte les r√©sultats"""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"demo_scraping_results_{timestamp}.csv"
        
        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = [
                'domain', 'purchase_price', 'estimated_value', 'roi_percentage',
                'recommendation', 'priority', 'da', 'backlinks', 'source'
            ]
            
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            
            for proj in projections:
                writer.writerow(proj)
        
        print(f"üíæ R√©sultats export√©s vers: {filename}")
        return filename
    
    def generate_summary_report(self, projections: List[Dict]) -> Dict:
        """G√©n√®re un rapport de synth√®se"""
        total_domains = len(projections)
        buy_recommendations = len([p for p in projections if 'ACHETER' in p['recommendation']])
        watch_recommendations = len([p for p in projections if p['recommendation'] == 'SURVEILLER'])
        
        total_investment = sum(p['purchase_price'] for p in projections[:10])  # Top 10
        total_estimated_value = sum(p['estimated_value'] for p in projections[:10])
        
        avg_roi = sum(p['roi_percentage'] for p in projections) / total_domains
        
        report = {
            'total_domains_analyzed': total_domains,
            'buy_recommendations': buy_recommendations,
            'watch_recommendations': watch_recommendations,
            'success_rate': (buy_recommendations / total_domains) * 100,
            'top_10_investment': total_investment,
            'top_10_estimated_value': total_estimated_value,
            'top_10_roi': ((total_estimated_value - total_investment) / total_investment) * 100,
            'average_roi': avg_roi
        }
        
        print(f"\nüìã RAPPORT DE SYNTH√àSE:")
        print(f"   üéØ Domaines analys√©s: {report['total_domains_analyzed']}")
        print(f"   ‚úÖ Recommandations d'achat: {report['buy_recommendations']}")
        print(f"   üëÄ √Ä surveiller: {report['watch_recommendations']}")
        print(f"   üìä Taux de succ√®s: {report['success_rate']:.1f}%")
        print(f"   üí∞ Investissement Top 10: {report['top_10_investment']:.0f}‚Ç¨")
        print(f"   üíé Valeur estim√©e Top 10: {report['top_10_estimated_value']:.0f}‚Ç¨")
        print(f"   üöÄ ROI projet√© Top 10: {report['top_10_roi']:.1f}%")
        print(f"   üìà ROI moyen global: {report['average_roi']:.1f}%")
        
        return report

def main():
    """Fonction principale de d√©monstration"""
    scraper = DemoScraper()
    
    # 1. Simulation du scraping
    all_domains = scraper.simulate_scraping(25)
    
    # 2. Filtrage qualit√©
    quality_domains = scraper.filter_quality_domains(all_domains)
    
    if quality_domains:
        # 3. Calcul des projections ROI
        projections = scraper.calculate_roi_projections(quality_domains)
        
        # 4. Export des r√©sultats
        csv_file = scraper.export_results(projections)
        
        # 5. Rapport de synth√®se
        report = scraper.generate_summary_report(projections)
        
        print(f"\nüéâ D√âMONSTRATION TERMIN√âE AVEC SUCC√àS!")
        print(f"üìÑ Fichier de r√©sultats: {csv_file}")
        print(f"üí° Le syst√®me de scraping est op√©rationnel et pr√™t pour la production.")
    else:
        print(f"\n‚ö†Ô∏è  Aucun domaine de qualit√© trouv√© dans cette simulation.")
        print(f"üí° Ajustez les crit√®res de filtrage ou augmentez le nombre de domaines.")

if __name__ == "__main__":
    main()

