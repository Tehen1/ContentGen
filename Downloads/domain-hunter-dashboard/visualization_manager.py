#!/usr/bin/env python3
"""
Gestionnaire de Visualisations pour Domain Hunter Dashboard
Int√®gre toutes les visualisations de performance et analytics
"""

import os
import sys
import subprocess
import json
from datetime import datetime
from pathlib import Path

class VisualizationManager:
    def __init__(self):
        self.base_dir = Path(__file__).parent
        self.scripts_dir = self.base_dir / "visualizations" / "scripts"
        self.charts_dir = self.base_dir / "visualizations" / "charts"
        self.output_dir = self.base_dir / "visualizations" / "output"
        
        # Cr√©er le r√©pertoire de sortie s'il n'existe pas
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
    def generate_performance_charts(self, data=None):
        """
        G√©n√®re les graphiques de performance du syst√®me
        """
        try:
            print("üîÑ G√©n√©ration des graphiques de performance...")
            
            # Ex√©cuter le script de graphiques de performance
            result = subprocess.run(
                [sys.executable, str(self.scripts_dir / "chart_script.py")],
                cwd=str(self.scripts_dir),
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                print("‚úÖ Graphique de performance g√©n√©r√© avec succ√®s")
                # D√©placer le fichier vers le r√©pertoire de sortie
                self._move_generated_file("performance_chart.png")
            else:
                print(f"‚ùå Erreur lors de la g√©n√©ration: {result.stderr}")
                
        except Exception as e:
            print(f"‚ùå Erreur: {str(e)}")
            
    def generate_monetization_charts(self, budget_data=None):
        """
        G√©n√®re les graphiques de strat√©gies de mon√©tisation
        """
        try:
            print("üîÑ G√©n√©ration des graphiques de mon√©tisation...")
            
            result = subprocess.run(
                [sys.executable, str(self.scripts_dir / "chart_script_1.py")],
                cwd=str(self.scripts_dir),
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                print("‚úÖ Graphique de mon√©tisation g√©n√©r√© avec succ√®s")
                self._move_generated_file("monetization_strategies_chart.png")
            else:
                print(f"‚ùå Erreur lors de la g√©n√©ration: {result.stderr}")
                
        except Exception as e:
            print(f"‚ùå Erreur: {str(e)}")
            
    def generate_radar_charts(self, domain_metrics=None):
        """
        G√©n√®re les graphiques radar pour l'analyse de domaines
        """
        try:
            print("üîÑ G√©n√©ration des graphiques radar...")
            
            result = subprocess.run(
                [sys.executable, str(self.scripts_dir / "chart_script_2.py")],
                cwd=str(self.scripts_dir),
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                print("‚úÖ Graphique radar g√©n√©r√© avec succ√®s")
                self._move_generated_file("radar_chart.png")
            else:
                print(f"‚ùå Erreur lors de la g√©n√©ration: {result.stderr}")
                
        except Exception as e:
            print(f"‚ùå Erreur: {str(e)}")
            
    def generate_system_dashboard(self):
        """
        G√©n√®re le tableau de bord syst√®me complet
        """
        try:
            print("üîÑ G√©n√©ration du tableau de bord syst√®me...")
            
            result = subprocess.run(
                [sys.executable, str(self.scripts_dir / "script.py")],
                cwd=str(self.scripts_dir),
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                print("‚úÖ Tableau de bord syst√®me g√©n√©r√© avec succ√®s")
                self._move_generated_file("system_metrics_dashboard.png")
            else:
                print(f"‚ùå Erreur lors de la g√©n√©ration: {result.stderr}")
                
        except Exception as e:
            print(f"‚ùå Erreur: {str(e)}")
            
    def _move_generated_file(self, filename):
        """
        D√©place un fichier g√©n√©r√© vers le r√©pertoire de sortie
        """
        source = self.scripts_dir / filename
        if source.exists():
            destination = self.output_dir / f"{datetime.now().strftime('%Y%m%d_%H%M%S')}_{filename}"
            source.rename(destination)
            print(f"üìÅ Fichier sauvegard√©: {destination.name}")
            
    def generate_all_charts(self):
        """
        G√©n√®re tous les graphiques disponibles
        """
        print("üöÄ G√©n√©ration compl√®te des visualisations...")
        print("=" * 50)
        
        self.generate_performance_charts()
        self.generate_monetization_charts()
        self.generate_radar_charts()
        self.generate_system_dashboard()
        
        print("\nüìä R√©sum√© des visualisations g√©n√©r√©es:")
        output_files = list(self.output_dir.glob("*.png"))
        for file in sorted(output_files):
            print(f"  üìà {file.name}")
            
        print(f"\n‚úÖ {len(output_files)} visualisations g√©n√©r√©es dans {self.output_dir}")
        
    def create_html_report(self):
        """
        Cr√©e un rapport HTML avec toutes les visualisations
        """
        html_content = f"""
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Domain Hunter Dashboard - Rapport Analytics</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
        h1 {{ color: #1FB8CD; text-align: center; margin-bottom: 30px; }}
        h2 {{ color: #333; border-bottom: 2px solid #1FB8CD; padding-bottom: 10px; }}
        .chart-section {{ margin: 30px 0; }}
        .chart-grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(500px, 1fr)); gap: 20px; }}
        .chart-item {{ background: #f9f9f9; padding: 15px; border-radius: 8px; text-align: center; }}
        .chart-item img {{ max-width: 100%; height: auto; border-radius: 5px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }}
        .timestamp {{ text-align: center; color: #666; font-size: 14px; margin-top: 20px; }}
        .metrics {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }}
        .metric-card {{ background: linear-gradient(135deg, #1FB8CD, #4ecdc4); color: white; padding: 20px; border-radius: 10px; text-align: center; }}
        .metric-value {{ font-size: 24px; font-weight: bold; }}
        .metric-label {{ font-size: 14px; opacity: 0.9; }}
    </style>
</head>
<body>
    <div class="container">
        <h1>üéØ Domain Hunter Dashboard - Analytics</h1>
        
        <div class="metrics">
            <div class="metric-card">
                <div class="metric-value">3,600+</div>
                <div class="metric-label">Domaines Analys√©s/Mois</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">345%</div>
                <div class="metric-label">ROI Moyen</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">828</div>
                <div class="metric-label">Opportunit√©s D√©tect√©es</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">‚Ç¨2.40</div>
                <div class="metric-label">Co√ªt par Analyse</div>
            </div>
        </div>
        
        <div class="chart-section">
            <h2>üìà Graphiques de Performance</h2>
            <div class="chart-grid">
                <div class="chart-item">
                    <h3>√âvolution Performance 12 Mois</h3>
                    <img src="charts/performance_chart.png" alt="Performance Chart">
                </div>
                <div class="chart-item">
                    <h3>Strat√©gies de Mon√©tisation par Budget</h3>
                    <img src="charts/monetization_strategies_chart.png" alt="Monetization Chart">
                </div>
            </div>
        </div>
        
        <div class="chart-section">
            <h2>üéØ Analyse de Profil Domaine</h2>
            <div class="chart-grid">
                <div class="chart-item">
                    <h3>Profil Domaine Expir√© Premium</h3>
                    <img src="charts/radar_chart.png" alt="Radar Chart">
                </div>
                <div class="chart-item">
                    <h3>M√©triques Syst√®me Automatis√©</h3>
                    <img src="charts/system_metrics_dashboard.png" alt="System Dashboard">
                </div>
            </div>
        </div>
        
        <div class="timestamp">
            Rapport g√©n√©r√© le {datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')}
        </div>
    </div>
</body>
</html>
        """
        
        report_path = self.base_dir / "analytics_report.html"
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
            
        print(f"üìÑ Rapport HTML cr√©√©: {report_path}")
        return report_path

def main():
    """
    Script principal pour la g√©n√©ration des visualisations
    """
    manager = VisualizationManager()
    
    print("üé® Domain Hunter Dashboard - Gestionnaire de Visualisations")
    print("=" * 60)
    
    # V√©rifier les d√©pendances
    try:
        import plotly
        import matplotlib
        print("‚úÖ D√©pendances visualisation disponibles")
    except ImportError as e:
        print(f"‚ùå D√©pendance manquante: {e}")
        print("üí° Installez avec: pip install plotly matplotlib seaborn pandas")
        return
    
    # G√©n√©rer toutes les visualisations
    manager.generate_all_charts()
    
    # Cr√©er le rapport HTML
    html_report = manager.create_html_report()
    
    print(f"\nüéâ G√©n√©ration termin√©e !")
    print(f"üìä Ouvrez {html_report} dans votre navigateur pour voir le rapport complet")

if __name__ == "__main__":
    main()

